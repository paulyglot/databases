1.List the commands for adding, updating, and deleting data.

Answer: adding = INSERT INTO [table] VALUES (x, y), updating = UPDATE [table] SET [column] WHERE [column] AND [column], deleting data = DELETE FROM [table] WHERE [column] 

2.Explain the structure for each type of command.

Answer: 
adding = INSERT INTO populates the specified table with values, the (id, name, price) which follows the table name is the set of columns that the values correspond to. VALUES are the actual input you want to show in your rows per each column specified. In some cases we will specify the data type within the VALUES entries too.

3.What are some of the data types that can be used in tables? Give a real-world example of each type.

Answer: There are more than 40 data types that can be used in tables, some of those include numeric as numbers, character as text, and date for Date and Time. Numeric for example is commonly the go to for money transactions. Character is very common for string entries when adding clothes to a server for a clothes store to keep track of. And date is a data type used for dates say at Airports where departures times are crucial for customers to know. 

4.Decide how to create a new table to hold a list of people invited to a wedding dinner. The table needs to have first and last names, whether they sent in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

Which data type would you use to store each of the following pieces of information?
First and last name - text
Whether they sent in their RSVP - boolean
Number of guests - integer
Number of meals - numeric

Write a command that creates the table to track the wedding dinner.
CREATE TABLE weddingDinner (
	name text,
	rsvp boolean,
	guests integer,
	meals numeric (1, 2)
);

Write a command that adds a column to track whether the guest sent a thank you card.

ALTER TABLE weddingDinner ADD COLUMN card boolean;

You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.

ALTER TABLE wedddingDinner DROP COLUMN meals;

The guests will need a place to sit at the reception, so write a command that adds a column for table number.

ALTER TABLE weddingDinner ADD COLUMN table integer;

The wedding is over and we do not need to keep this information, so write a command that deletes the table numbers from the database.

ALTER TABLE weddingDinner DROP COLUMN table; 


5.Write a command to create a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.

CREATE TABLE holdBooks (
	isbn integer,
	title text,
	author text,
	genre text,
	publishDate date,
	copies integer,
	copiesAvailable integer
);

Find three books and add their information to the table.

INSERT INTO holdBooks (isbn, title, author, genre, pusblishDate, copies, copiesAvailable) VALUES 
(0134477960, 'Psycholoy', 'Saundra K Ciccarelli', 'non-fiction', DATE '2017-08-04', 5, 1),
(2134477960, 'Pathology', 'Laudo K Crumpet', 'non-fiction', DATE '2016-08-04', 10, 5),
(1134477960, 'Psychiatry', 'Paul A Jones', 'non-fiction', DATE '2015-08-04', 15, 10);

Someone has just checked out one of the books. Change the number of available copies to 1 fewer.

UPDATE holdBooks SET copies=9 WHERE isbn=1134477960;

Now one of the books has been added to the banned books list. Remove it from the table.

DELETE FROM holdBooks WHERE isbn=2134477960;

6.Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, orbiting body, if it is currently operating, and its approximate miles from Earth. In addition to the table creation, provide commands that perform the following operations:

CREATE TABLE spaceCrafts (
	id integer,
	name text,
	yearLaunched integer,
	countryOrigin text,
	description text,
	orbitingBody text,
	operating boolean,
	milesAway numeric (10, 2)
);

Add three non-Earth-orbiting satellites to the table.

INSERT INTO spaceCrafts (id, name, yearLaunched, countryOrigin,	description, orbitingBody, operating, milesAway) VALUE 
(100, 'Paul's Solar System Satellite', 2018, 'USA', 'satellite launched to help with climactic data collection on Mars', 'DELTA 205 MARS', TRUE, 500,000),
(101, 'Climate Reactor', 2016, 'USA', 'satellite launched to help with climactic data collection on Mars', 'DELTLA 1 DEB', TRUE, 450,000),
(102, 'Into the Abyss', 2017, 'USA', 'satellite launched to help with climactic data collection on Mars', 'COSMOS 2251', TRUE, 20,000);

Remove one of the satellites from the table since it has just crashed into the planet.

DELETE FROM spaceCrafts WHERE id=102;

Edit another satellite because it is no longer operating and change the value to reflect that.

UPDATE spaceCrafts SET operating=FALSE WHERE id=101;

7.Write a command to create a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, the body of the email, the timestamp, whether or not you have read the email, and the id of the email chain it's in. Also provide commands that perform the following operations:

CREATE TABLE emailInbox (
	id integer,
	subject text,
	sender text,
	recipients text,
	body text,
	timestamp timestamp,
	unread boolean,
	emailChain integer
);

Add three new emails to the inbox.

INSERT INTO emailInbox (id, subject, sender, recipients, body, timestamp, unread, emailChain) VALUE 
(1, 'missed meeting', 'pabrower@ucdavis.edu', 'help@bloc.io', 'hello bloc I missed my mentor meeting, and I'd like to reschedule thanks!', TIMESTAMP, TRUE, 3000),
(2, 'freeze account', 'pabrower@ucdavis.edu', 'help@bloc.io', 'hello bloc I need to freeze my account for this week thanks!', TIMESTAMP, TRUE, 3001),
(3, 'new mentor', 'pabrower@ucdavis.edu', 'help@bloc.io', 'hello bloc my mentor and I don't get along, and I'd like to get a new one thanks!', TIMESTAMP, FALSE, 3002);

You deleted one of the emails, so write a command to remove the row from the inbox table.

DELETE FROM emailInbox WHERE id=2;

You started reading an email but just heard a crash in another room. Mark the email as unread 
before investigating the crash, so you can come back and read it later.

UPDATE  emailInbox SET unread=TRUE WHERE id=3;
























































